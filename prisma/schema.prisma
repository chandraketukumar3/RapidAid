// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  DOCTOR
  STAFF
  ADMIN
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?
  role          UserRole
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships based on role
  doctor        Doctor?
  patient       Patient?
  staff         Staff?

  // Notifications for all user types
  notifications Notification[]
}

model Patient {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth       DateTime?
  bloodGroup        String?
  allergies         String?
  chronicDiseases   String?
  emergencyContact  String?
  address           String?
  biometricEnabled  Boolean  @default(false)
  patternLockHash   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  medicalRecords    MedicalRecord[]
  doctorPatients    DoctorPatient[]
  familyAccess      FamilyAccess[]
  emergencyAccesses EmergencyAccess[]
}

model Doctor {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization   String?
  hospital         String?
  licenseNumber    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  doctorPatients   DoctorPatient[]
  medicalRecords   MedicalRecord[]
}

model Staff {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  department    String?
  position      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  medicalRecords MedicalRecord[]
}

model DoctorPatient {
  id        String   @id @default(cuid())
  doctorId  String
  patientId String
  createdAt DateTime @default(now())

  // Relationships
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])

  @@unique([doctorId, patientId])
}

model MedicalRecord {
  id          String   @id @default(cuid())
  patientId   String
  title       String
  description String?
  fileUrl     String?
  fileType    String?
  uploadedBy  String?  // Can be doctor or staff ID
  doctorId    String?
  staffId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  patient     Patient  @relation(fields: [patientId], references: [id])
  doctor      Doctor?  @relation(fields: [doctorId], references: [id])
  staff       Staff?   @relation(fields: [staffId], references: [id])
}

model FamilyAccess {
  id          String   @id @default(cuid())
  patientId   String
  email       String
  name        String?
  accessLevel String    // READ_ONLY, EMERGENCY, etc.
  inviteToken String?
  accepted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?

  // Relationships
  patient     Patient  @relation(fields: [patientId], references: [id])
}

model EmergencyAccess {
  id          String   @id @default(cuid())
  patientId   String
  accessToken String   @unique
  qrCodeUrl   String?
  createdAt   DateTime @default(now())
  lastAccessed DateTime?

  // Relationships
  patient     Patient  @relation(fields: [patientId], references: [id])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  isRead      Boolean  @default(false)
  type        String   // EMERGENCY, UPLOAD, SYSTEM, etc.
  createdAt   DateTime @default(now())

  // Relationships
  user        User     @relation(fields: [userId], references: [id])
}

model EmergencyLocation {
  id          String   @id @default(cuid())
  latitude    Float
  longitude   Float
  patientId   String?
  status      String   // ACTIVE, RESOLVED
  createdAt   DateTime @default(now())
  resolvedAt  DateTime?
}
